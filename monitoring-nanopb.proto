syntax = "proto2";
import "nanopb.proto";


enum Method
{
  SET                                   = 0;
  GET                                   = 1;
}

enum PowerMethod
{
  MAIN                                   = 0;
  BATTERY                                = 1;
}

message Message
{
    required uint32 uid                 = 1;              /* серийный номер устройства */
    optional Data data                  = 2;              /* данные */
    optional MCUSettings mcuSettings    = 3;              /* настройки устройства */
    optional MCUUpdate   mcuUpdate      = 4;              /* структура для перепрошивки МК*/
    optional string firmwareVersion     = 5 [(nanopb).max_length = 20]; /* версия прошивки устройства, только для чтения */
    optional PowerStatus powerStatus    = 6;
}

message PowerStatus
{
    optional uint32 percentage          = 1;
    required PowerMethod powerMethod    = 2;
}

message Data
{
    required Method data_method         = 1;
    repeated Sensor Sensor              = 2 [(nanopb).max_count = 40]; /* Массив структур датчиков */
}

message Sensor
{
    optional float value                = 1;            /* измеренное датчиком значение */
    optional float max_value            = 2;            /* верхнее пороговое значение */
    optional float min_value            = 3;            /* нижнее пороговое значение */
    optional bool isOn                  = 4;            /* включить-выключить датчик */
    required SensorType sensor_type     = 5;            /* тип датчика */
    required uint32 pin                 = 6;            /* номер канала (0-40)*/
    //TODO настройки подключения, порты, каналы
    //TODO возможно какие-то иные настройки для конкретных датчиков
}

message MCUSettings
{
    required Method method              = 1;
    optional uint32 protobufVersion     = 2; 
    /* 
        Версия protobuf, только для чтения. Старшие 2 байта указывают на версию proto: 2 или 3. 
        Младшие 2 байта на версию, применительную к полям файла. 
    */
    optional uint32 rtcTimestamp        = 3;                /* временная метка часов реального времени */

    //TODO: настройки микроконтроллера
}


message MCUUpdate
{
    oneof UPDStat
    {
        UPDStart upd_start              = 1; /* Информация об устанавливаемом обновлении */
        FlashPage flash_page            = 2; /* Страница обновления */
        UPDStatus upd_status            = 3; /* Статус-посылка */
    }
}

message UPDStart
{
    required uint32 firmware_size       = 1; /* Размер прошивки стрпаницах флешки */
    required uint32 firmware_crc        = 2; /* CRC прошивки */
    required uint32 timestamp           = 3; /* Время */
}

message FlashPage
{
    required bytes page_data          = 1 [(nanopb).max_size = 512]; /* Данные страницы флешки*/
    required uint32 page_CRC          = 2;
}

enum UPDStatus
{
    ready_to_receive                    = 0; /* Готов к получению следующей страницы */
    update_finished                     = 1; /* Обновление завершено успешно*/
    page_crc_error                      = 2; /* Ошибка CRC пакета */
    update_error                        = 3; /* Обновление завершено с ошибками */
}


enum SensorType
{
    None_Sensor                         = 0;                //пусто
    Rapid_5                             = 1;                //датчик движения 
    Piron_4                             = 2;                //датчик движения
    IP_212_45                           = 3;                //датчик задымления
    IPD_3_2_M                           = 4;                //датчик задымления
    IO_102_2                            = 5;                //датчик открытия дверей
    Vodoley_P                           = 6;                //датчик протечки
    DZ_4                                = 7;                //датчик протечки
    ASTRA_361                           = 8;                //датчик протечки
    SHOROH_2                            = 9;                //датчик вибрации
    DS18B20                             = 10;                //датчик температуры
    DHT22                               = 11;                //датчик температуры и влажности
    RD_710                              = 12;                //извещатель(сирена)
    SA_913_FM                           = 13;                //извещатель(сирена)
    ST_DM125NO_WT                       = 14;                //датчик открытия дверей
    IP_212_44                           = 15;                //датчик задымления
    Voltage_5                           = 16;                //датчик 5 вольт
    Relay                               = 17;                //Реле
}
